@using TriviaApp.UI.Model.TriviaQuestion.Question
@using TriviaApp.UI.Service.Utility

<div class="@(Hide ? "d-none" : "") d-flex justify-content-center">
    @if (Question is QuestionMultipleChoiceViewModel)
    {
        var questionMultipleChoice = Question as QuestionMultipleChoiceViewModel;

        @if (questionMultipleChoice != null)
        {
            <div class="card rounded-3 @AnimationCss" style="width: 45rem;">
                <div class="card-body">
                    <h5 class="card-title fs-3">@Question.Text</h5>
                    <h6 class="card-subtitle mb-4 text-muted">@Question.Number out of @TotalQuestions</h6>
                    <p class="card-text">
                        <EditForm Model=Question>
                            <InputRadioGroup Name="@questionMultipleChoice.Number.ToString()" @bind-Value=SelectedAnswer class="btn-group" role="group">
                                @foreach (var choice in questionMultipleChoice.Choices)
                                {
                                    var letter = NumberToLetterUtility.ConvertToLetter(questionMultipleChoice.Choices.IndexOf(choice) + 1);
                                    var choiceLineText = $"{letter}. {choice}";
                                    var isAnswer = questionMultipleChoice.Answer.Trim().ToLower().Equals(choice.Trim().ToLower());
                                    var isSelected = SelectedAnswer == choice;
                                    var cssClass = "btn-outline-info text-dark";

                                    @if (ShowNextButton)
                                    {
                                        @if (isAnswer)
                                        {
                                            cssClass = "btn-success text-light";

                                            @if (isSelected)
                                            {
                                                cssClass += " animate__animated animate__tada";
                                            }
                                        }
                                        else if (isSelected)
                                        {
                                            cssClass = "btn-danger text-light animate__animated animate__shakeX";
                                        }
                                    }

                                    <div class="mb-2 d-flex align-items-center">
                                        <InputRadio Name=@questionMultipleChoice.Number.ToString() Value=choice class="btn-check" id=@choice /> 
                                        <label class="btn fs-4 align-baseline @cssClass" for="@choice">
                                            @choiceLineText
                                        </label>

                                        @if (!isAnswer && ShowNextButton && isSelected)
                                        {
                                            <span class="oi oi-circle-x text-danger ms-2 fs-4"></span>
                                        }
                                        <br />
                                    </div>
                                }
                            </InputRadioGroup>
                        </EditForm>
                    </p>
                </div>
            </div>
        }
    }
</div>

<div class="d-flex justify-content-center">
    <div class="mt-4 @(ShowNextButton ? "" : "d-none")">
        <button type="button" class="btn btn-outline-primary btn-lg rounded-pill" @onclick=OnNextClick>
            Next
        </button>
    </div>

    <div class="me-2 mt-4">
        <button type="button" 
                class="btn btn-outline-primary btn-lg rounded-pill @(ShowNextButton ? "d-none" : "") @(string.IsNullOrEmpty(SelectedAnswer) ? "disabled" : "")" 
                @onclick=OnSubmitClick>
            Submit
        </button>
    </div>
</div>